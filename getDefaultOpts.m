function [opt] = getDefaultOpts()
	opt = {};
	opt.expt_name = 'unset';
	opt.which_algs_paths = 'unset';         % paths to images generated by algoritms, e.g. {'my_alg','baseline_alg'}
	opt.vigilance_path = 'vigilance';       % path to vigilance images
	opt.gt_path = 'gt';                     % path to gt images
	opt.Nimgs = 100;                        % number of images to test
	opt.Npairs = 60;                        % number of paired comparisons per HIT
	opt.Npractice = 10;                     % number of practice trials per HIT (number of non-practice trials is opt.Npairs-opt.Npractice)
	opt.Nhits_per_alg = 10;                 % number of HITs per algorithm
	opt.vigilance_freq = 0.1;               % percent of trials that are vigilance tests
	opt.use_vigilance = true;               % include vigilance trials (obviously fake images to check that Turkers are paying attention)	
	opt.ut_id = 'unset';                    % set this using http://uniqueturker.myleott.com/
	opt.base_url = 'unset';                 % url where images to test are accessible as "opt.base_url/n.png", for integers n
	opt.instructions_file = 'unset';        % instructions appear at the beginning of the HIT
	opt.short_instructions_file = 'unset';  % short instructions are shown at the top of every trial
	opt.consent_file = 'unset';             % informed consent text appears the beginning of the HIT
	opt.im_height = 256;                    % dimensions at which to display the stimuli
	opt.im_width = 256;                     %
	opt.paired = true;                      % if true, then fake/n.jpg will be pitted against real/n.jpg; if false, fake/n.jpg will be pitted against real/m.jpg, for random n and m
    opt.time_image_display = 1000;          % amount of time to display each image
    opt.time_image_gap = 500;               % amount of time to wait between images
    opt.time_button_delay = 500;            % amount of time to wait for the same/not same button to appear
    opt.simultaneous = 0;                   % 0 for sequential, 1 for simultaneous
end